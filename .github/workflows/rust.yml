name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: windows-latest  # Windows-Runner für den Build-Prozess

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions/setup-rust@v1
        with:
          rust-version: 'stable'  # Du kannst auch eine andere Version wählen

      - name: Install dependencies
        run: cargo build --release  # Hier werden alle Dependencies installiert und der Release-Build erstellt

      - name: Run tests
        run: cargo test  # Führe Tests aus (optional, aber empfohlen)

      - name: Build the project
        run: cargo build --release --target x86_64-pc-windows-msvc  # Erstelle das Projekt für Windows (MSVC)

      - name: Upload release binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-rust-app  # Der Name des Artefakts
          path: target/x86_64-pc-windows-msvc/release/my-rust-app.exe  # Der Pfad zur gebauten .exe Datei

  release:
    runs-on: ubuntu-latest  # Der Release-Job läuft auf einem Linux-Runner

    needs: build  # Dieser Job startet erst nach dem erfolgreichen Build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: target/x86_64-pc-windows-msvc/release/my-rust-app.exe  # Die Datei, die hochgeladen werden soll
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Das GitHub Token wird automatisch bereitgestellt
